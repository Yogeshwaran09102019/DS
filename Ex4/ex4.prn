Script started on 2021-02-19 14:40:03+05:30 [TERM="xterm-256color" TTY="/dev/tty1" COLUMNS="158" LINES="38"]
]0;yogesh@Yogesh: /mnt/c/Users/yogeshwaran/desktop/pgms/lab/ex4[01;32myogesh@Yogesh[00m:[01;34m/mnt/c/Users/yogeshwaran/desktop/pgms/lab/ex4[00m$ cat Queue.h
#include<iostream>
using namespace std;
class Complex
{
	private:
			int real; // Real Value
			int imaginary; // Imaginary Value
	public:
			Complex();
			Complex(int,int); // Constructors
			Complex(const Complex&);
			~Complex(); // Destructors
			void getInput(); // Get Input
			void display(); // Display 
	friend class Queue; // Queue is the friend of this class
};

class Queue
{
	private:
			Complex *data; // To hold List of Complex Numbers in Queue
			int front; // Front End Of the Queue
			int rear; // Rear End of the Queue
			int capacity; // Total Capacity of the Queue
	public:
			Queue(); //Constructors
			Queue(Complex*,int,int,int);
			Queue(const Queue&);
			~Queue(); // Destructors
			int enQueue(Complex); // Insertion at rear End
			Complex deQueue(); // Deletion at front End
			int isFull(); // Full or Not
			int isEmpty(); // Empty or not
			Complex peak(); // Peak Element of Queue
			int size(); // Current Size of the Queue
			bool makeEmpty(); // Make Complete Queue Empty
			void displayQueue(); // Display Queue
};
]0;yogesh@Yogesh: /mnt/c/Users/yogeshwaran/desktop/pgms/lab/ex4[01;32myogesh@Yogesh[00m:[01;34m/mnt/c/Users/yogeshwaran/desktop/pgms/lab/ex4[00m$ cat QueueImp.cpp
#include"Queue.h"

Complex::Complex()
{
	real=0;
	imaginary=0;
}

Complex::Complex(int r,int i)
{
	real=r;
	imaginary=i;
}

Complex::Complex(const Complex &c)
{
	real=c.real;
	imaginary=c.imaginary;
}

Complex::~Complex()
{
	real=0;
	imaginary=0;
}

void Complex::getInput()
{
	cout<<"\nEnter the Real Number:";
	cin>>real;
	cout<<"\nEnter the Imaginary Number:";
	cin>>imaginary;
}

void Complex::display()
{
	cout<<real<<" + "<<imaginary<<"i\n";
}

Queue::Queue()
{
	data=NULL;
	front=rear=-1;
	capacity=5;
	for(int i=0;i<5;i++)
		data[i]=Complex();
}

Queue::Queue(Complex *c,int f,int r,int c1)
{
	data=new Complex[c1];
	front=f;
	rear=r-1;
	capacity=c1;
	for(int i=0;i<=rear;i++)
		data[i]=c[i];
	for(int i=rear+1;i<capacity;i++)
		data[i]=Complex();
}

Queue::Queue(const Queue &q)
{
	data=new Complex[q.capacity];
	for(int i=0;i<q.rear;i++)
		data[i]=q.data[i];
	front=q.front;
	rear=q.rear;
	capacity=q.capacity;
	for(int i=rear+1;i<capacity;i++)
		data[i]=Complex();
}

Queue::~Queue()
{
	front=rear=-1;
	capacity=0;
	delete data;
	data=NULL;
}

int Queue::isEmpty()
{
	if((front==-1 && rear==-1) || front>rear)
		return 1;
	else
		return 0;
}

int Queue::isFull()
{
	if(capacity-1==rear)
		return 1;
	else
		return 0;
}

int Queue::enQueue(Complex c)
{
	if(!isFull())
	{
		if(isEmpty())
		{
			front=rear=0;
			data[rear]=c;
		}
		else
		{
			rear++;
			data[rear]=c;
		}
		return 1;
	}
	else
		return 0;
}

Complex Queue::deQueue()
{
	if(!isEmpty())
	{
		Complex c=data[front];
		front++;
		return c;
	}
	else
		cout<<"Empty Queue ... Deletion not possible..\n";
}

int Queue::size()
{
	int c=0;
	if(isEmpty())
		return c;	
	else
	{
		c=(rear-front)+1;
		return c;
	}
}

Complex Queue::peak()
{
	if(isEmpty())
		cout<<"Queue Empty ... No peak Element..\n";
	else
		return data[front];
}

bool Queue::makeEmpty()
{
	if(isEmpty())
		cout<<"List is Already Empty...\n";
	else
	{
		while(!isEmpty())
			Complex c=deQueue();
		return true;
	}
	return false;
}

void Queue::displayQueue()
{
	if(isEmpty())
		cout<<"Empty Stack nothing to Display...\n";
	else
	{
	int i=0;
	for(i=front;i<=rear-1;i++)
		cout<<data[i].real<<" + "<<data[i].imaginary<<"i"<<" -> ";
	cout<<data[i].real<<" + "<<data[i].imaginary<<"i"<<endl;
	}
}
]0;yogesh@Yogesh: /mnt/c/Users/yogeshwaran/desktop/pgms/lab/ex4[01;32myogesh@Yogesh[00m:[01;34m/mnt/c/Users/yogeshwaran/desktop/pgms/lab/ex4[00m$ cat QueueApp.cpp
#include"Queue.h"
int main()
{
	int f,cap,r,c=0;
	bool x;
	char ch1;
	Complex c1,c2,c3;
	cout<<"Enter the Capacity:";
	cin>>cap;
	cout<<"\nEnter the front value:";
	cin>>f;
	cout<<"\nEnter the rear Value:";
	cin>>r;
	cout<<"\nEnter the elements:";
	Complex *c11=new Complex[cap];
	for(int i=f;i<r;i++)
		c11[i].getInput();
	Queue q(c11,f,r,cap);
	int ch;
	do
	{
		cout<<"Enter \n";
		cout<<"		1.IsFull \n";
		cout<<"		2.IsEmpty \n";
		cout<<"		3.EnQueue \n";
		cout<<"		4.DeQueue \n";
		cout<<"		5.Size \n";
		cout<<"		6.Peak \n";
		cout<<"		7.MakeEmpty \n";
		cout<<"		8.Display \n";
		cout<<"Enter your Choice:";
		cin>>ch;
		cout<<endl;
		switch(ch)
		{
			case 1:
					c=q.isFull();
					if(c==1)
						cout<<"The Queue is Full...\n";
					else
						cout<<"The Queue is not Full...\n";
					break;
			case 2:
					c=q.isEmpty();
					if(c==1)
						cout<<"The Queue is Empty...\n";
					else
						cout<<"The Queue is not Empty...\n";
					break;
			case 3:
					cout<<"Enter the new Complex Number to insert:";
					c1.getInput();
					c=q.enQueue(c1);
					if(c==1)
						cout<<"Inserted Successfully...\n";
					else
						cout<<"Not Success....\n";
					break;
			case 4:
					c2=q.deQueue();
					cout<<"\nThe deleted item is:";
					c2.display();
					cout<<endl;
					break;
			case 5:
					c=q.size();
					cout<<"The Size of Queue:"<<c<<endl;
					break;
			case 6:
					c3=q.peak();
					cout<<"\nThe Peak Element is:";
					c3.display();
					break;
			case 7:
					x=q.makeEmpty();
					if(x==true)
						cout<<"Queue Emptied...\n";
					else
						cout<<"Queue is Not Emptied...\n";
					break;
			case 8:
					q.displayQueue();
					break;
			default:
					cout<<"Wrong Input.... Try Again!!!\n";
					break;
		}
		cout<<"Enter 'y' to continue...\n";
		cin>>ch1;
	}while(ch1=='y');		
return 0;
}
]0;yogesh@Yogesh: /mnt/c/Users/yogeshwaran/desktop/pgms/lab/ex4[01;32myogesh@Yogesh[00m:[01;34m/mnt/c/Users/yogeshwaran/desktop/pgms/lab/ex4[00m$ cat makefile
Queue.exe: QueueImp.o QueueApp.o
	        g++ QueueImp.o QueueApp.o -o Queue.exe
QueueImp.o: QueueImp.cpp
	        g++ -c QueueImp.cpp
QueueApp.o: QueueApp.cpp
	        g++ -c QueueApp.cpp
]0;yogesh@Yogesh: /mnt/c/Users/yogeshwaran/desktop/pgms/lab/ex4[01;32myogesh@Yogesh[00m:[01;34m/mnt/c/Users/yogeshwaran/desktop/pgms/lab/ex4[00m$ ./Queue.exe
Enter the Capacity:5

Enter the front value:1

Enter the rear Value:3

Enter the elements:
Enter the Real Number:1

Enter the Imaginary Number:1

Enter the Real Number:2

Enter the Imaginary Number:2
Enter 
		1.IsFull 
		2.IsEmpty 
		3.EnQueue 
		4.DeQueue 
		5.Size 
		6.Peak 
		7.MakeEmpty 
		8.Display 
Enter your Choice:1

The Queue is not Full...
Enter 'y' to continue...
y
Enter 
		1.IsFull 
		2.IsEmpty 
		3.EnQueue 
		4.DeQueue 
		5.Size 
		6.Peak 
		7.MakeEmpty 
		8.Display 
Enter your Choice:2

The Queue is not Empty...
Enter 'y' to continue...
y
Enter 
		1.IsFull 
		2.IsEmpty 
		3.EnQueue 
		4.DeQueue 
		5.Size 
		6.Peak 
		7.MakeEmpty 
		8.Display 
Enter your Choice:3

Enter the new Complex Number to insert:
Enter the Real Number:3

Enter the Imaginary Number:3
Inserted Successfully...
Enter 'y' to continue...
y
Enter 
		1.IsFull 
		2.IsEmpty 
		3.EnQueue 
		4.DeQueue 
		5.Size 
		6.Peak 
		7.MakeEmpty 
		8.Display 
Enter your Choice:8

1 + 1i -> 2 + 2i -> 3 + 3i
Enter 'y' to continue...
y
Enter 
		1.IsFull 
		2.IsEmpty 
		3.EnQueue 
		4.DeQueue 
		5.Size 
		6.Peak 
		7.MakeEmpty 
		8.Display 
Enter your Choice:4


The deleted item is:1 + 1i

Enter 'y' to continue...
y
Enter 
		1.IsFull 
		2.IsEmpty 
		3.EnQueue 
		4.DeQueue 
		5.Size 
		6.Peak 
		7.MakeEmpty 
		8.Display 
Enter your Choice:8

2 + 2i -> 3 + 3i
Enter 'y' to continue...
y
Enter 
		1.IsFull 
		2.IsEmpty 
		3.EnQueue 
		4.DeQueue 
		5.Size 
		6.Peak 
		7.MakeEmpty 
		8.Display 
Enter your Choice:5

The Size of Queue:2
Enter 'y' to continue...
y
Enter 
		1.IsFull 
		2.IsEmpty 
		3.EnQueue 
		4.DeQueue 
		5.Size 
		6.Peak 
		7.MakeEmpty 
		8.Display 
Enter your Choice:6


The Peak Element is:2 + 2i
Enter 'y' to continue...
y
Enter 
		1.IsFull 
		2.IsEmpty 
		3.EnQueue 
		4.DeQueue 
		5.Size 
		6.Peak 
		7.MakeEmpty 
		8.Display 
Enter your Choice:7

Queue Emptied...
Enter 'y' to continue...
y
Enter 
		1.IsFull 
		2.IsEmpty 
		3.EnQueue 
		4.DeQueue 
		5.Size 
		6.Peak 
		7.MakeEmpty 
		8.Display 
Enter your Choice:8

Empty Stack nothing to Display...
Enter 'y' to continue...
n
Segmentation fault (core dumped)
]0;yogesh@Yogesh: /mnt/c/Users/yogeshwaran/desktop/pgms/lab/ex4[01;32myogesh@Yogesh[00m:[01;34m/mnt/c/Users/yogeshwaran/desktop/pgms/lab/ex4[00m$ exit
exit

Script done on 2021-02-19 14:42:13+05:30 [COMMAND_EXIT_CODE="139"]
